const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');
const { getConferenceDb } = require('./conferenceDb');

function getReportsDir(conferenceCode) {
  const dir = path.join(__dirname, '../../conferences', conferenceCode, 'reports');
  if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
  return dir;
}

function addWatermark(doc) {
  doc.fontSize(40).fillColor('red').opacity(0.15);
  doc.rotate(-30, { origin: [300, 300] });
  doc.text('CONFIDENTIAL', 100, 300, { align: 'center', width: 400 });
  doc.rotate(30, { origin: [300, 300] });
  doc.opacity(1).fillColor('black');
}

function addCoverPage(doc, title, conference, user) {
  doc.addPage();
  doc.fontSize(28).text(conference.name, { align: 'center' });
  doc.moveDown();
  doc.fontSize(20).text(title, { align: 'center' });
  doc.moveDown();
  doc.fontSize(14).text(`Conference Code: ${conference.code}`, { align: 'center' });
  doc.text(`Generated by: ${user.username}`, { align: 'center' });
  doc.text(`Generated at: ${new Date().toLocaleString()}`, { align: 'center' });
  doc.moveDown(2);
  addWatermark(doc);
}

function addTOC(doc, sections) {
  doc.addPage();
  doc.fontSize(18).text('Table of Contents', { align: 'center' });
  doc.moveDown();
  doc.fontSize(12);
  sections.forEach((s, i) => {
    doc.text(`${i + 1}. ${s}`, { indent: 20 });
  });
  doc.moveDown();
  addWatermark(doc);
}

async function generatePeopleReport(conferenceCode, user) {
  const db = getConferenceDb(conferenceCode);
  const Conference = db.models.Conference;
  const conf = await Conference.findOne({ code: conferenceCode });
  const people = conf.people;
  const doc = new PDFDocument({ autoFirstPage: false });
  const dir = getReportsDir(conferenceCode);
  const file = path.join(dir, `people_${Date.now()}.pdf`);
  doc.pipe(fs.createWriteStream(file));
  addCoverPage(doc, 'People Report', conf, user);
  addTOC(doc, ['People List']);
  doc.addPage();
  doc.fontSize(16).text('People List', { underline: true });
  doc.moveDown();
  people.forEach(p => {
    doc.fontSize(12).text(`Name: ${p.username} | Role: ${p.role} | Country: ${p.country || ''}`);
    doc.text(`Email: ${p.email || ''}`);
    doc.moveDown(0.5);
  });
  addWatermark(doc);
  doc.end();
  return file;
}

// Similar functions for amendments, chat, voting, contributions, awards...
// For brevity, only people report is fully written here. Others follow same structure.

module.exports = {
  generatePeopleReport,
  // generateAmendmentsReport,
  // generateChatReport,
  // generateVotingReport,
  // generateContributionsReport,
  // generateAwardsReport
}; 